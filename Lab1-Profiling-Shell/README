CS111 Lab 1C
Andrew Lee - 204304351
Michelle Chang - 904262084

Code compiles on gnu11
We do not account for the case where there is a \n after a pipe: a | \n b

I added 2 test scripts for this part, as the spec calls for, called
test-prof-ok.sh and test-prof-bad.sh. They are in the same style as test-t-ok.sh
and test-t-bad.sh. In test-prof-ok.sh, I check the output file for the correct
number of process id lines, the correct number of commands run, and if the times
that they ended are in increasing order. In test-t-bad.sh, I run commands that
should not exec any commands and check that there are no lines with letters in them, since the only profiling lines that should be there use [pid] instead of
the command name. One note: I use sleep commands in test-prof-ok.sh, so please
do not think that the compilation failed because there is a bit of a hang.

1. Yes. In our program, we never called fork() more than 1 time per command, so
   there would not be any conflicts with 2 or more processes ending at around 
   the same time. We also did not implement any parallelism, so there would
   not be any race conditions that would cause profiling lines to be printed
   out of order. We also use waitpid to wait for child processes to finish 
   before we print profiling information about them.
2. No, the real time for the process cannot be less than the sum of the user
   time and the system time, in the scope of this lab. That is because the only
   time this can happen are when multiple threads in one process add to the 
   user/system time while reducing real time. Since we are not implementing
   parallelism in this lab, this is not possible.
3. In our implementation of the code, the 2nd, 3rd, and 4th columns cannot be
   negative. One reason this could happen is that the variables that hold the
   times can overflow if they cannot hold large enough numbers. We use variables
   with that can hold large enough values to avoid this.
4. The only commands that need profiling information are simple commands and 
   pipe commands in our implementation. To test simple commands, I ran profsh
   on a sequence command made up of multiple simple commands; 
   e.g. sleep 2s; sleep 3s; sleep 4s
   When I ran profsh on this, the output information was in the correct order, 
   and I assumed that this would hold for any string of simple commands.

   For pipe commands, I tried piping sleep commands of various lengths into 
   each other, to see what would happen to the profiling information if certain
   sections of the pipe finish before other sections. 
   e.g. sleep 4s | sleep 3s | sleep 2s 
   	sleep 5s | sleep 1s | sleep 3s
	sleep 1s | sleep 3s | sleep 2s
	sleep 1s | sleep 2s | sleep 3s
   When I ran all of these cases, the log lines printed in the correct order.
   I tested these on the Seasnet Linux server.
